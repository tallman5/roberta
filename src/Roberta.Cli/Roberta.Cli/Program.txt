using System.Device.Gpio;

namespace SBusReader
{
    class Program
    {
        static int SBUS_PIN = 17;
        static int FRAME_SIZE = 25;
        static byte[] frame = new byte[FRAME_SIZE];
        static GpioController gpioController = new GpioController();

        static void Main(string[] args)
        {
            gpioController.OpenPin(SBUS_PIN, PinMode.Input);
            gpioController.RegisterCallbackForPinValueChangedEvent(SBUS_PIN, PinEventTypes.Rising, PinChanged);
            gpioController.RegisterCallbackForPinValueChangedEvent(SBUS_PIN, PinEventTypes.Falling, PinChanged);

            Console.Read();

            gpioController.ClosePin(SBUS_PIN);
            gpioController.Dispose();
        }

        private static void PinChanged(object sender, PinValueChangedEventArgs pinValueChangedEventArgs)
        {
            if (frame[0] != 0x0F)
            {
                var val = (byte)gpioController.Read(SBUS_PIN);
                frame[0] <<= 1;
                frame[0] |= val;
            }
            else
            {
                for (var fIndex = 1; fIndex < FRAME_SIZE; fIndex++)
                {
                    frame[fIndex] = 0;
                    for (var bIndex = 0; bIndex < 8; bIndex++)
                    {
                        frame[fIndex] <<= 1;
                        frame[fIndex] |= (byte)gpioController.Read(SBUS_PIN);
                    }
                }

                if (frame[24] == 0x00)
                {
                    for (int i = 0; i < frame.Length; i++)
                    {
                        Console.Write($"{frame[i]:X2} ");
                    }
                    Console.WriteLine();
                }

                frame[0] = 0;
            }
        }
    }
}
